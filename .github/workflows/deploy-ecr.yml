name: Deploy to ECR

on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]

env:
  AWS_REGION: ap-northeast-1

jobs:
  deploy:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.event.workflow_run.head_sha }}
        run: |
          docker build --build-arg ENVIRONMENT=dev -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" .
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Register task def and update service (pinned digest)
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.event.workflow_run.head_sha }}
          ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
          ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
        run: |
          set -e
          # 1) ECR からコミット SHA タグのイメージに対応する digest を取得
          DIGEST=$(aws ecr describe-images --repository-name "$ECR_REPOSITORY" --image-ids imageTag="$IMAGE_TAG" --query 'imageDetails[0].imageDigest' --output text)
          # 2) digest で固定されたイメージ URI を作成（<registry>/<repo>@<digest>）
          NEW_IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY@$DIGEST"
          # 3) 現在サービスが参照するタスク定義 ARN を取得
          TASK_DEF_ARN=$(aws ecs describe-services --cluster "$ECS_CLUSTER" --services "$ECS_SERVICE" --query 'services[0].taskDefinition' --output text)
          # 4) タスク定義の JSON を取得
          aws ecs describe-task-definition --task-definition "$TASK_DEF_ARN" --query 'taskDefinition' > taskdef.json
          # 5) メタ情報を削除し、containerDefinitions[].image を新 URI に差し替え
          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities) | .containerDefinitions |= map(.image = env.NEW_IMAGE_URI)' taskdef.json > taskdef.rendered.json
          # 6) 新しいタスク定義リビジョンを登録
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://taskdef.rendered.json --query 'taskDefinition.taskDefinitionArn' --output text)
          # 7) サービスを新タスク定義に更新し、安定化を待機
          aws ecs update-service --cluster "$ECS_CLUSTER" --service "$ECS_SERVICE" --task-definition "$NEW_TASK_DEF_ARN"
          aws ecs wait services-stable --cluster "$ECS_CLUSTER" --services "$ECS_SERVICE"
