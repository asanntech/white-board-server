name: Deploy to ECR

on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]

env:
  AWS_REGION: ap-northeast-1

jobs:
  deploy:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.event.workflow_run.head_sha }}
        run: |
          docker build -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" -t "$ECR_REGISTRY/$ECR_REPOSITORY:latest" .
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:latest"

      - name: Run Prisma migrations on ECS (one-off task)
        env:
          ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
          MIGRATION_TASK_DEFINITION: ${{ secrets.MIGRATION_TASK_DEFINITION }}
          MIGRATION_CONTAINER_NAME: ${{ secrets.MIGRATION_CONTAINER_NAME }}
          SUBNETS: ${{ secrets.MIGRATION_SUBNETS }}
          SECURITY_GROUPS: ${{ secrets.MIGRATION_SECURITY_GROUPS }}
        run: |
          set -euo pipefail
          set -x
          sudo apt-get update -y && sudo apt-get install -y jq

          # Ensure bracketed array format for ECS CLI
          SUBNETS_ARG="$SUBNETS"
          if [[ "${SUBNETS_ARG:0:1}" != "[" ]]; then SUBNETS_ARG="[$SUBNETS_ARG]"; fi
          SECURITY_GROUPS_ARG="$SECURITY_GROUPS"
          if [[ "${SECURITY_GROUPS_ARG:0:1}" != "[" ]]; then SECURITY_GROUPS_ARG="[$SECURITY_GROUPS_ARG]"; fi

          # Run task and capture full JSON for diagnostics
          RUN_JSON=$(aws ecs run-task \
            --cluster "$ECS_CLUSTER" \
            --task-definition "$MIGRATION_TASK_DEFINITION" \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=$SUBNETS_ARG,securityGroups=$SECURITY_GROUPS_ARG,assignPublicIp=DISABLED}" \
            --count 1 \
            --output json)
          echo "$RUN_JSON"

          FAILURE_REASON=$(echo "$RUN_JSON" | jq -r '.failures[0].reason // empty')
          if [[ -n "$FAILURE_REASON" ]]; then
            echo "run-task failure: $FAILURE_REASON" >&2
            exit 1
          fi

          TASK_ARN=$(echo "$RUN_JSON" | jq -r '.tasks[0].taskArn // empty')
          if [[ -z "$TASK_ARN" ]]; then
            echo "No taskArn returned from run-task" >&2
            exit 1
          fi

          aws ecs wait tasks-stopped --cluster "$ECS_CLUSTER" --tasks "$TASK_ARN"

          DESC_JSON=$(aws ecs describe-tasks \
            --cluster "$ECS_CLUSTER" \
            --tasks "$TASK_ARN" \
            --output json)
          echo "$DESC_JSON"

          STOPPED_REASON=$(echo "$DESC_JSON" | jq -r '.tasks[0].stoppedReason // empty')
          CONTAINER_REASON=$(echo "$DESC_JSON" | jq -r '.tasks[0].containers[0].reason // empty')
          EXIT_CODE=$(echo "$DESC_JSON" | jq -r '.tasks[0].containers[0].exitCode')
          echo "StoppedReason: $STOPPED_REASON"
          echo "ContainerReason: $CONTAINER_REASON"
          echo "Migration task exit code: $EXIT_CODE"
          test "$EXIT_CODE" = "0"

      - name: Force new ECS deployment (uses :latest in task definition)
        env:
          ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
          ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
        run: |
          set -e
          aws ecs update-service --cluster "$ECS_CLUSTER" --service "$ECS_SERVICE" --force-new-deployment
          aws ecs wait services-stable --cluster "$ECS_CLUSTER" --services "$ECS_SERVICE"
