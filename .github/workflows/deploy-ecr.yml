name: Deploy to ECR

on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]

env:
  AWS_REGION: ap-northeast-1

jobs:
  deploy:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.event.workflow_run.head_sha }}
        run: |
          docker build -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" -t "$ECR_REGISTRY/$ECR_REPOSITORY:latest" .
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:latest"

      - name: Run Prisma migrations on ECS (one-off task)
        uses: aws-actions/amazon-ecs-run-task@v2
        with:
          cluster: ${{ secrets.ECS_CLUSTER }}
          task-definition: ${{ secrets.MIGRATION_TASK_DEFINITION }}
          launch-type: FARGATE
          wait-for-completion: true
          network-configuration: >-
            awsvpcConfiguration={subnets=${{ secrets.MIGRATION_SUBNETS }},securityGroups=${{ secrets.MIGRATION_SECURITY_GROUPS }},assignPublicIp=DISABLED}

      - name: Force new ECS deployment (uses :latest in task definition)
        env:
          ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
          ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
        run: |
          set -e
          aws ecs update-service --cluster "$ECS_CLUSTER" --service "$ECS_SERVICE" --force-new-deployment
          aws ecs wait services-stable --cluster "$ECS_CLUSTER" --services "$ECS_SERVICE"
